stages:          # List of stages for jobs, and their order of execution
  - build
  - test

build-job:       # This job runs in the build stage, which runs first.
  stage: build
  script:
    - echo "Compiling the code..."
    - echo "Compile complete."
  rules:
    # Scan changed files in MRs, (diff-aware scanning):
    - if: $CI_MERGE_REQUEST_IID
    # Scan mainline (default) branches and report all findings.
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH


# semgrep-ci-with-jdk-mvn-image:
#   stage: test
#   image: openkbs/jdk11-mvn-py3
#   script:
#     - pip3 install semgrep
#     - export PATH=$PATH:$HOME/.local/bin
#     - mvn dependency:tree -DoutputFile=maven_dep_tree.txt
#     - semgrep ci
#   rules:
#     # Scan changed files in MRs, (diff-aware scanning):
#     - if: $CI_MERGE_REQUEST_IID
#     # Scan mainline (default) branches and report all findings.
#     - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
#   variables:
#     # Upload findings to GitLab SAST Dashboard:
#     SEMGREP_GITLAB_JSON: "1"
#     SEMGREP_APP_TOKEN: $SEMGREP_APP_TOKEN
#     GITLAB_TOKEN: $PAT

# semgrep-ci-installing-jdk-maven:
#   stage: test
#   image: ubuntu
#   script:
#     - apt update
#     - apt install python3 -y
#     - python3 --version
#     - apt install python3-pip -y
#     - pip3 --version
#     - apt install openjdk-17-jdk -y
#     - java --version
#     - apt install maven -y
#     - mvn --version
#     - mvn dependency:tree -DoutputFile=maven_dep_tree.txt
#     - pip3 install semgrep
#     - export PATH=$PATH:$HOME/.local/bin
#     ## - git is needed too! 
#     - semgrep ci
#   rules:
#     # Scan changed files in MRs, (diff-aware scanning):
#     - if: $CI_MERGE_REQUEST_IID
#     # Scan mainline (default) branches and report all findings.
#     - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
#   variables:
#     # Upload findings to GitLab SAST Dashboard:
#     SEMGREP_GITLAB_JSON: "1"
#     SEMGREP_APP_TOKEN: $SEMGREP_APP_TOKEN
#     GITLAB_TOKEN: $PAT

# semgrep-ci-installing-jdk-maven:
#   stage: test
#   image: returntocorp/semgrep
#   script:
#     - free -m | grep -v "Swap" # RAM
#     - df -h| grep -E "Filesystem|overlay" # storage
#     - apk add openjdk17
#     - java --version
#     - apk add maven
#     - mvn --version
#     - mvn dependency:tree -DoutputFile=maven_dep_tree.txt
#     - semgrep ci --timeout 3 --interfile-timeout 180 --disable-version-check --metrics=off --no-suppress-errors
#   rules:
#     # Scan changed files in MRs, (diff-aware scanning):
#     - if: $CI_MERGE_REQUEST_IID
#     # Scan mainline (default) branches and report all findings.
#     - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
#   variables:
#     # Upload findings to GitLab SAST Dashboard:
#     SEMGREP_GITLAB_JSON: "1"
#     SEMGREP_APP_TOKEN: $SEMGREP_APP_TOKEN
#     GITLAB_TOKEN: $PAT

semgrep:
  image: returntocorp/semgrep
  script: semgrep ci
  stage: build
  rules:
  - changes:
      - .gitlab-ci.yml
  - if: $CI_PIPELINE_SOURCE == "web"  # allow triggering a scan manually from the gitlab UI
  - if: $CI_MERGE_REQUEST_IID
  variables:
    SEMGREP_APP_TOKEN: $SEMGREP_APP_TOKEN
    SEMGREP_JOB_URL: $CI_JOB_URL
    SEMGREP_COMMIT: $CI_COMMIT_SHA
    SEMGREP_BRANCH: $CI_COMMIT_REF_NAME
    SEMGREP_REPO_NAME: $CI_PROJECT_NAME
    SEMGREP_REPO_URL: $CI_REPOSITORY_URL
    SEMGREP_PR_ID: $CI_MERGE_REQUEST_ID
    MAVEN_CLI_OPTS: "--settings ${CI_PROJECT_DIR}/settings.xml -DskipTests -DskipITs -Ddependency-check.skip=true -Ddockerfile.skip=true"
  before_script:
    - apk add openjdk17
    - java --version
    - apk add maven
    - mvn --version
    - echo '<?xml version="1.0" encoding="UTF-8"?>' >> settings.xml
    - echo '<settings xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.1.0 http://maven.apache.org/xsd/settings-1.1.0.xsd" xmlns="http://maven.apache.org/SETTINGS/1.1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">' >> settings.xml
    - echo '<mirrors><mirror><mirrorOf>central</mirrorOf><name>jvm-libs-release</name><url>https://artifactory.ops.ripple.com:443/artifactory/jvm-libs-release</url><id>jvm-libs-release</id></mirror><mirror><mirrorOf>snapshots</mirrorOf><name>jvm-libs-snapshot</name><url>https://artifactory.ops.ripple.com:443/artifactory/jvm-libs-snapshot</url><id>jvm-libs-snapshot</id></mirror></mirrors>' >> settings.xml
    - echo '<profiles><profile><id>artifactory</id>' >> settings.xml
    - echo '<repositories><repository><snapshots><enabled>false</enabled></snapshots><releases><enabled>true</enabled></releases><id>central</id><name>jvm-libs-release</name><url>https://artifactory.ops.ripple.com:443/artifactory/jvm-libs-release</url></repository><repository><snapshots><enabled>true</enabled></snapshots><releases><enabled>false</enabled></releases><id>snapshots</id><name>jvm-libs-snapshot</name><url>https://artifactory.ops.ripple.com:443/artifactory/jvm-libs-snapshot</url></repository></repositories>' >> settings.xml
    - echo '<pluginRepositories><pluginRepository><snapshots><enabled>false</enabled></snapshots><id>central</id><name>jvm-libs-release</name><url>https://artifactory.ops.ripple.com:443/artifactory/jvm-libs-release</url></pluginRepository><pluginRepository><snapshots /><id>snapshots</id><name>jvm-libs-snapshot</name><url>https://artifactory.ops.ripple.com:443/artifactory/jvm-libs-snapshot</url></pluginRepository></pluginRepositories>' >> settings.xml
    - echo '</profile></profiles><activeProfiles><activeProfile>artifactory</activeProfile></activeProfiles></settings>' >> settings.xml
    - mvn clean install $MAVEN_CLI_OPTS
    - mvn dependency:tree $MAVEN_CLI_OPTS -DoutputFile=maven_dep_tree.txt
